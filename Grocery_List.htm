<!--
    Grocery List App Assignment
    Developer: Alejandro Lopez-Jauregui
    Date:      September 22, 2025
    Filename:  Lopez_Alejandro_Grocery_List.html
-->
<!doctype html>
<html lang="en" class="h-full">
<head>
  <meta charset="UTF-8" />
  <title>Grocery List</title>

  <!-- Vue 3 (loaded from a CDN) -->
  <script src="https://unpkg.com/vue@3"></script>

  <!-- Bootstrap CSS (CDN) for styling -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />

  <style>
    /* A simple style to strike through items marked as done */
    .done {
      text-decoration: line-through;
      opacity: 0.7;
    }
  </style>
</head>

<body class="bg-light">
  <!-- The Vue app will "mount" on this element -->
  <div id="app" class="container py-4">
    <!-- Title -->
    <h1 class="text-center mb-4">Grocery List</h1>

    <!--
      The form to add a new grocery item.
      @submit.prevent means "run addItem() and DON'T reload the page."
    -->
    <form class="card shadow-sm mb-4" @submit.prevent="addItem">
      <div class="card-body row g-2 align-items-end">
        <!--
          v-model binds the input's value to data in our Vue app.
          When the user types, newItemName is updated automatically.
        -->
        <div class="col-md-6">
          <label for="itemName" class="form-label">Grocery Item</label>
          <input
            id="itemName"
            type="text"
            class="form-control"
            placeholder="e.g., Apples"
            v-model="newItemName"
          />
        </div>

        <!-- Quantity input; type=number keeps it simple and numeric -->
        <div class="col-md-3">
          <label for="itemQty" class="form-label">Quantity</label>
          <input
            id="itemQty"
            type="number"
            class="form-control"
            min="1"
            placeholder="e.g., 3"
            v-model.number="newItemQty"
          />
        </div>

        <!-- The button that adds the item to the list -->
        <div class="col-md-3 d-grid">
          <button class="btn btn-primary">
            Add Item
          </button>
        </div>
      </div>
    </form>

    <!-- The list of items -->
    <!-- v-if shows a message if the list is empty -->
    <div v-if="items.length === 0" class="alert alert-info">
      Your list is empty. Add your grocery items above!
    </div>

    <!--
      v-for loops over each item in "items".
      :key helps Vue track each item.
    -->
    <ul class="list-group" v-else>
      <li
        class="list-group-item d-flex align-items-center justify-content-between"
        v-for="item in items"
        :key="item.id"
      >
        <div class="d-flex align-items-center gap-2">
          <!--
            The checkbox is bound to item.done with v-model.
            Checking/unchecking updates the "done" value.
          -->
          <input class="form-check-input" type="checkbox" v-model="item.done" />

          <!--
            :class adds the "done" class when item.done is true,
            which applies the strike-through style.
          -->
          <span :class="{ done: item.done }">
            {{ item.name }}
            <!-- Show the quantity next to the name as a Bootstrap badge -->
            <span class="badge text-bg-secondary ms-2">x{{ item.qty }}</span>
          </span>
        </div>

        <!-- Delete button to remove the item -->
        <button class="btn btn-sm btn-outline-danger" @click="deleteItem(item.id)">
          Delete
        </button>
      </li>
    </ul>
  </div>

  <script>
    // Create a new Vue application
    Vue.createApp({
      // data() returns all the reactive values used by this app
      data() {
        return {
          // Bound to the "Grocery Item" text input
          newItemName: '',
          // Bound to the "Quantity" number input
          newItemQty: 1,
          // The list of grocery items the user adds
          items: [],
          // A simple counter to make unique IDs for each item
          nextId: 1
        };
      },

      // methods are functions we can call from the template (HTML) or inside the app
      methods: {
        // Add a new item to the list
        addItem() {
          // Trim spaces from the name
          const name = this.newItemName.trim();

          // Basic validation: name must not be empty, qty must be >= 1
          if (!name) {
            alert('Please enter an item name.');
            return;
          }
          if (!Number.isFinite(this.newItemQty) || this.newItemQty < 1) {
            alert('Please enter a valid quantity (1 or more).');
            return;
          }

          // Push a new item object into the items array
          this.items.push({
            id: this.nextId++,  // unique id
            name: name,         // item name
            qty: this.newItemQty, // quantity
            done: false         // checkbox starts unchecked
          });

          // Clear the inputs for the next entry
          this.newItemName = '';
          this.newItemQty = 1;
        },

        // Remove an item from the list by its id
        deleteItem(id) {
          // filter creates a new array without the item whose id matches
          this.items = this.items.filter(item => item.id !== id);
        }
      }
    })
    // Mount (attach) the Vue app to the element with id="app"
    .mount('#app');
  </script>
</body>
</html>